{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 223, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/lenovo/Documents/DevFlux/bus-tracker/src/ai/genkit.ts"],"sourcesContent":["import {genkit} from 'genkit';\r\nimport {googleAI} from '@genkit-ai/googleai';\r\n\r\nexport const ai = genkit({\r\n  plugins: [googleAI()],\r\n  model: 'googleai/gemini-2.5-flash',\r\n});\r\n"],"names":[],"mappings":";;;AAAA;AAAA;AACA;AAAA;;;AAEO,MAAM,KAAK,CAAA,GAAA,uIAAA,CAAA,SAAM,AAAD,EAAE;IACvB,SAAS;QAAC,CAAA,GAAA,2KAAA,CAAA,WAAQ,AAAD;KAAI;IACrB,OAAO;AACT","debugId":null}},
    {"offset": {"line": 244, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/lenovo/Documents/DevFlux/bus-tracker/src/ai/flows/real-time-eta-prediction.ts"],"sourcesContent":["// src/ai/flows/real-time-eta-prediction.ts\r\n'use server';\r\n\r\n/**\r\n * @fileOverview A real-time ETA prediction AI agent.\r\n *\r\n * - predictRealTimeETA - A function that handles the real-time ETA prediction process.\r\n * - RealTimeETAPredictionInput - The input type for the predictRealTimeETA function.\r\n * - RealTimeETAPredictionOutput - The return type for the predictRealTimeETA function.\r\n */\r\n\r\nimport {ai} from '@/ai/genkit';\r\nimport {z} from 'genkit';\r\n\r\nconst RealTimeETAPredictionInputSchema = z.object({\r\n  busLocation: z\r\n    .object({\r\n      latitude: z.number().describe('The latitude of the bus.'),\r\n      longitude: z.number().describe('The longitude of the bus.'),\r\n      timestamp: z.number().describe('The timestamp of the bus location.'),\r\n    })\r\n    .describe('The current location of the bus.'),\r\n  studentStop: z\r\n    .object({\r\n      latitude: z.number().describe('The latitude of the student stop.'),\r\n      longitude: z.number().describe('The longitude of the student stop.'),\r\n    })\r\n    .describe('The location of the student stop.'),\r\n  routeData: z.string().describe('The route data including distance to the stop.'),\r\n  historicalTrafficData: z\r\n    .string()\r\n    .describe('Historical traffic data for the route and time of day.'),\r\n});\r\nexport type RealTimeETAPredictionInput = z.infer<typeof RealTimeETAPredictionInputSchema>;\r\n\r\nconst RealTimeETAPredictionOutputSchema = z.object({\r\n  estimatedArrivalTime: z.string().describe('The estimated time of arrival at the student stop.'),\r\n  confidence: z\r\n    .number()\r\n    .min(0)\r\n    .max(1)\r\n    .describe('The confidence level of the ETA prediction (0 to 1).'),\r\n  explanation: z.string().describe('Explanation of factors affecting ETA.'),\r\n});\r\nexport type RealTimeETAPredictionOutput = z.infer<typeof RealTimeETAPredictionOutputSchema>;\r\n\r\nexport async function predictRealTimeETA(\r\n  input: RealTimeETAPredictionInput\r\n): Promise<RealTimeETAPredictionOutput> {\r\n  return realTimeETAPredictionFlow(input);\r\n}\r\n\r\nconst prompt = ai.definePrompt({\r\n  name: 'realTimeETAPredictionPrompt',\r\n  input: {schema: RealTimeETAPredictionInputSchema},\r\n  output: {schema: RealTimeETAPredictionOutputSchema},\r\n  prompt: `You are a real-time ETA prediction expert. You will receive the current\r\n  bus location, the student's stop location, route data, and historical traffic\r\n  data. Use this information to estimate the arrival time at the student's stop.\r\n\r\n  Bus Location: Latitude: {{{busLocation.latitude}}}, Longitude:\r\n  {{{busLocation.longitude}}}, Timestamp: {{{busLocation.timestamp}}}\r\n  Student Stop: Latitude: {{{studentStop.latitude}}}, Longitude:\r\n  {{{studentStop.longitude}}}\r\n  Route Data: {{{routeData}}}\r\n  Historical Traffic Data: {{{historicalTrafficData}}}\r\n\r\n  Provide the estimated arrival time, a confidence level (0 to 1), and an\r\n  explanation of the factors affecting the ETA.\r\n\r\n  Ensure the estimatedArrivalTime is in ISO 8601 format.\r\n  `,\r\n});\r\n\r\nconst realTimeETAPredictionFlow = ai.defineFlow(\r\n  {\r\n    name: 'realTimeETAPredictionFlow',\r\n    inputSchema: RealTimeETAPredictionInputSchema,\r\n    outputSchema: RealTimeETAPredictionOutputSchema,\r\n  },\r\n  async input => {\r\n    const {output} = await prompt(input);\r\n    return output!;\r\n  }\r\n);\r\n"],"names":[],"mappings":"AAAA,2CAA2C;;;;;;AAG3C;;;;;;CAMC,GAED;AACA;AAAA;;;;;;AAEA,MAAM,mCAAmC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAChD,aAAa,uIAAA,CAAA,IAAC,CACX,MAAM,CAAC;QACN,UAAU,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;QAC9B,WAAW,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;QAC/B,WAAW,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IACjC,GACC,QAAQ,CAAC;IACZ,aAAa,uIAAA,CAAA,IAAC,CACX,MAAM,CAAC;QACN,UAAU,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;QAC9B,WAAW,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IACjC,GACC,QAAQ,CAAC;IACZ,WAAW,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC/B,uBAAuB,uIAAA,CAAA,IAAC,CACrB,MAAM,GACN,QAAQ,CAAC;AACd;AAGA,MAAM,oCAAoC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACjD,sBAAsB,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC1C,YAAY,uIAAA,CAAA,IAAC,CACV,MAAM,GACN,GAAG,CAAC,GACJ,GAAG,CAAC,GACJ,QAAQ,CAAC;IACZ,aAAa,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AACnC;AAGO,eAAe,mBACpB,KAAiC;IAEjC,OAAO,0BAA0B;AACnC;AAEA,MAAM,SAAS,mHAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IAC7B,MAAM;IACN,OAAO;QAAC,QAAQ;IAAgC;IAChD,QAAQ;QAAC,QAAQ;IAAiC;IAClD,QAAQ,CAAC;;;;;;;;;;;;;;;EAeT,CAAC;AACH;AAEA,MAAM,4BAA4B,mHAAA,CAAA,KAAE,CAAC,UAAU,CAC7C;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAM;IACJ,MAAM,EAAC,MAAM,EAAC,GAAG,MAAM,OAAO;IAC9B,OAAO;AACT;;;IArCoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 329, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/lenovo/Documents/DevFlux/bus-tracker/.next-internal/server/app/dashboard/student/track/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {predictRealTimeETA as '403dd3924672ca25e867dd9e057b1ee5a602c1cb50'} from 'ACTIONS_MODULE0'\n"],"names":[],"mappings":";AAAA","debugId":null}},
    {"offset": {"line": 387, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/lenovo/Documents/DevFlux/bus-tracker/src/app/dashboard/student/track/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/dashboard/student/track/page.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/dashboard/student/track/page.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAA4S,GACzU,0EACA","debugId":null}},
    {"offset": {"line": 401, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/lenovo/Documents/DevFlux/bus-tracker/src/app/dashboard/student/track/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/dashboard/student/track/page.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/dashboard/student/track/page.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAwR,GACrT,sDACA","debugId":null}},
    {"offset": {"line": 415, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}